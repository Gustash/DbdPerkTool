{"version":3,"file":"static/js/651.278d3cd0.chunk.js","mappings":"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","sources":["app/components/Badge.tsx","app/components/Form/PlainTextInput.tsx","app/components/SuccessModal.tsx","app/pages/MyProfilePage/MyProfile/AuthorLink.tsx","app/components/DefaultContainer.tsx","app/components/Notifications.tsx","app/pages/MyProfilePage/index.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nconst Badge = styled.i`\n  margin-left: 3px;\n  margin-right: 3px;\n\n  &:hover {\n    color: var(--main-color);\n    cursor: pointer;\n  }\n`;\n\nexport default Badge;\n","// @ts-nocheck\nimport React, { Component, useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport styled from 'styled-components';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport Badge from '../Badge';\nimport { ReactNode } from 'react-bootstrap/node_modules/@types/react';\n\ntype MyProps = {\n  onChange: Function;\n  onInputChange?: Function;\n  disabled?: boolean;\n  options?: any;\n  value: string;\n  label: string;\n  help?: any;\n};\n\nconst InputWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst InputValueWrapper = styled.div`\n  flex: 1;\n  margin-left: 10px;\n`;\n\nexport default function PlainTextInput(props: MyProps) {\n  let input;\n  let tooltip: ReactNode = undefined;\n\n  const helpTxt = props.help;\n\n  if (props.help) {\n    const renderTooltip = props => (\n      <Tooltip id=\"pti-tooltip\" {...props}>\n        {helpTxt}\n      </Tooltip>\n    );\n    tooltip = (\n      <OverlayTrigger\n        placement=\"right\"\n        delay={{ show: 250, hide: 1000 }}\n        overlay={renderTooltip}\n        trigger={['click']}\n      >\n        <Badge className=\"fas fa-question-circle ml-2\"></Badge>\n      </OverlayTrigger>\n    );\n  }\n\n  if (props.options) {\n    input = (\n      <Typeahead\n        onChange={props.onChange}\n        onInputChange={props.onInputChange}\n        allowNew={true}\n        labelKey=\"name\"\n        options={props.options}\n        value={props.value}\n      />\n    );\n  } else {\n    input = (\n      <Form.Control\n        type=\"plaintext\"\n        value={props.value}\n        disabled={props.disabled}\n        className=\"dbd-input-field\"\n        onChange={props.onChange}\n      />\n    );\n  }\n  return (\n    <Form.Group>\n      <InputWrapper>\n        <Form.Label className=\"field-label-text\">{props.label}</Form.Label>\n        {tooltip}\n        <InputValueWrapper>{input}</InputValueWrapper>\n      </InputWrapper>\n    </Form.Group>\n  );\n}\n","import React, { Component, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\ntype MyProps = { show: any; onHide: any; title: string; text: string };\n\nexport default function SuccessModal(props: MyProps) {\n  return (\n    <Modal\n      closeVariant=\"white\"\n      show={props.show}\n      size=\"lg\"\n      onHide={props.onHide}\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton closeVariant=\"white\">\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          {props.title}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <h4>{props.text}</h4>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={props.onHide}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n","import React, { Component, useState, useEffect, useContext } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport styled from 'styled-components';\nimport Col from 'react-bootstrap/Col';\nimport PlainTextInput from '../../../components/Form/PlainTextInput';\n\ntype MyProps = {\n  label: string;\n  link: string;\n  onChange: Function;\n  onRemove: Function;\n};\n\nconst LinkWrapper = styled.div`\n  box-shadow: 0 0.5rem 1rem rgba(35, 132, 164, 0.6);\n  padding: 10px;\n  margin: 10px;\n`;\n\nconst RemoveLinkWrapper = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n  margin-right: 10px;\n  align-items: center;\n`;\n\nexport default function AuthorLink(props: MyProps) {\n  const [label, setLabel] = useState(props.label);\n  const [link, setLink] = useState(props.link);\n\n  const updateLabel = (value: string) => {\n    setLabel(value);\n    props.onChange(value, link);\n  };\n\n  const updateLink = (value: string) => {\n    setLink(value);\n    props.onChange(label, value);\n  };\n\n  return (\n    <LinkWrapper>\n      <RemoveLinkWrapper>\n        <i\n          onClick={() => {\n            props.onRemove();\n          }}\n          className=\"fas fa-minus-circle fa-lg author-link-remove\"\n        ></i>\n      </RemoveLinkWrapper>\n      <PlainTextInput\n        label=\"Name\"\n        value={label}\n        onChange={e => updateLabel(e.target.value)}\n      />\n      <PlainTextInput\n        label=\"Link\"\n        value={link}\n        onChange={e => updateLink(e.target.value)}\n      />\n    </LinkWrapper>\n  );\n}\n","import styled from 'styled-components';\n\nconst DefaultContainer = styled.div`\n  display: flex;\n  background: rgba(0, 0, 0, 0.5);\n  flex-direction: column;\n  min-width: 800px;\n  height: fit-content;\n  padding: 10px;\n`;\n\nexport { DefaultContainer };\n","import React, { LegacyRef, useContext, useState } from 'react';\nimport styled from 'styled-components';\nimport { useTable, usePagination, useRowSelect } from 'react-table';\nimport api from '../../utils/api/api';\nimport { Button, Dropdown } from 'react-bootstrap';\nimport AppContext from '../UserProvider';\nimport log from '../../utils/log';\nimport moment from 'moment';\n\nconst UserTableContainer = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst UserTableFooter = styled.div`\n  padding-top: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Styles = styled.div`\n  padding: 1rem;\n  height: 100%;\n  display: block;\n  max-width: 100%;\n\n  table {\n    width: 100%;\n    border-spacing: 0;\n    border: 1px solid var(--main-color);\n    background: rgba(0, 0, 0, 0.5);\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid var(--main-color);\n      border-right: 1px solid var(--main-color);\n    }\n  }\n`;\n\nconst IndeterminateCheckbox = React.forwardRef(\n  // @ts-ignore\n  ({ indeterminate, ...rest }, ref) => {\n    const defaultRef = React.useRef();\n    const resolvedRef = ref || defaultRef;\n\n    React.useEffect(() => {\n      // @ts-ignore\n      resolvedRef.current.indeterminate = indeterminate;\n    }, [resolvedRef, indeterminate]);\n\n    return (\n      // @ts-ignore\n      <>\n        <input\n          type=\"checkbox\"\n          ref={resolvedRef as LegacyRef<HTMLInputElement>}\n          {...rest}\n        />\n      </>\n    );\n  },\n);\n\n// Let's add a fetchData method to our Table component that will be used to fetch\n// new data when pagination state changes\n// We can also add a loading state to let our table know it's loading new data\nfunction Table({\n  columns,\n  data,\n  fetchData,\n  loading,\n  pageCount: controlledPageCount,\n}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    selectedFlatRows,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    // Get the state from the instance\n    state: { pageIndex, pageSize, selectedRowIds },\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0 }, // Pass our hoisted table state\n      manualPagination: true, // Tell the usePagination\n      // hook that we'll handle our own data fetching\n      // This means we'll also have to provide our own\n      // pageCount.\n      pageCount: controlledPageCount,\n    },\n    usePagination,\n    useRowSelect,\n    hooks => {\n      hooks.visibleColumns.push(columns => [\n        // Let's make a column for selection\n        {\n          id: 'selection',\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: ({ getToggleAllRowsSelectedProps }) => (\n            <div>\n              <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n            </div>\n          ),\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: ({ row }) => (\n            <div>\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n            </div>\n          ),\n        },\n        ...columns,\n      ]);\n    },\n  );\n\n  // Listen for changes in pagination and use the state to fetch our new data\n  React.useEffect(() => {\n    fetchData({ pageIndex, pageSize });\n  }, [fetchData, pageIndex, pageSize]);\n\n  const appContext = useContext(AppContext);\n\n  // Render the UI for your table\n  return (\n    <div>\n      <div className=\"mb-2\">\n        {Object.keys(selectedRowIds).length > 0 && (\n          <Button\n            variant=\"secondary\"\n            onClick={async () => {\n              const deletePromises = selectedFlatRows.map(row => {\n                return appContext.user?.deleteNotification(row.original);\n              });\n              await Promise.all(deletePromises);\n              log.info('Deleted notifications');\n              fetchData({ pageIndex, pageSize });\n            }}\n          >\n            Delete\n          </Button>\n        )}\n        {Object.keys(selectedRowIds).length > 0 && (\n          <Button\n            variant=\"secondary\"\n            className=\"ml-1\"\n            onClick={async () => {\n              const markPromises = selectedFlatRows\n                .filter(row => row.original.read === false)\n                .map(row => {\n                  return appContext.user?.markNotification(row.original, true);\n                });\n              await Promise.all(markPromises);\n              fetchData({ pageIndex, pageSize });\n            }}\n          >\n            Mark Read\n          </Button>\n        )}\n      </div>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' 🔽'\n                        : ' 🔼'\n                      : ''}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n          <tr>\n            {loading ? (\n              // Use our custom loading state to show a loading indicator\n              // @ts-ignore\n              <td colSpan=\"10000\">Loading...</td>\n            ) : (\n              // @ts-ignore\n              <td colSpan=\"10000\">\n                Showing {page.length} of ~{controlledPageCount * pageSize}{' '}\n                results\n              </td>\n            )}\n          </tr>\n        </tbody>\n      </table>\n      {/* \n        Pagination can be built however you'd like. \n        This is just a very basic UI implementation:\n      */}\n      <UserTableFooter>\n        <Button\n          className=\"btn-secondary mr-1\"\n          onClick={() => gotoPage(0)}\n          disabled={!canPreviousPage}\n        >\n          {'<<'}\n        </Button>{' '}\n        <Button\n          className=\"btn-secondary mr-1\"\n          onClick={() => previousPage()}\n          disabled={!canPreviousPage}\n        >\n          {'<'}\n        </Button>{' '}\n        <Button\n          className=\"btn-secondary mr-1\"\n          onClick={() => nextPage()}\n          disabled={!canNextPage}\n        >\n          {'>'}\n        </Button>{' '}\n        <Button\n          className=\"btn-secondary mr-1\"\n          onClick={() => gotoPage(pageCount - 1)}\n          disabled={!canNextPage}\n        >\n          {'>>'}\n        </Button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\n              gotoPage(page);\n            }}\n            className=\"paginate-selector\"\n          />\n        </span>{' '}\n        <select\n          className=\"paginate-selector\"\n          value={pageSize}\n          onChange={e => {\n            setPageSize(Number(e.target.value));\n          }}\n        >\n          {[10, 20, 30, 40, 50].map(pageSize => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </UserTableFooter>\n    </div>\n  );\n}\n\nfunction App() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Notifications',\n        columns: [\n          {\n            Header: '',\n            accessor: 'read',\n            style: {\n              textAlign: 'center',\n            },\n            // provide custom function to format props\n            Cell: props =>\n              props.value ? (\n                <div>\n                  <i className=\"fas fa-envelope-open-text\"></i>{' '}\n                </div>\n              ) : (\n                <div>\n                  <i className=\"fas fa-envelope\"></i>{' '}\n                </div>\n              ),\n          },\n          {\n            Header: 'Title',\n            accessor: 'name',\n          },\n          {\n            Header: 'Text',\n            accessor: 'text',\n          },\n          {\n            Header: 'Age',\n            accessor: 'createdAt',\n            Cell: props => (\n              <div>\n                {moment\n                  .duration(Date.now() - new Date(props.value).getTime())\n                  .humanize()}\n              </div>\n            ),\n          },\n        ],\n      },\n    ],\n    [],\n  );\n\n  // We'll start our table without any data\n  const [data, setData] = React.useState([]);\n  const [loading, setLoading] = React.useState(false);\n  const [pageCount, setPageCount] = React.useState(0);\n  const fetchIdRef = React.useRef(0);\n  const appContext = useContext(AppContext);\n\n  const fetchData = React.useCallback(async ({ pageSize, pageIndex }) => {\n    // This will get called when the table needs new data\n    // You could fetch your data from literally anywhere,\n    // even a server. But for this example, we'll just fake it.\n\n    // Give this fetch an ID\n    const fetchId = ++fetchIdRef.current;\n\n    // Set the loading state\n    setLoading(true);\n\n    if (fetchId === fetchIdRef.current) {\n      // @ts-ignore\n      const notifications = await appContext.user.getNotifications({\n        page: pageIndex + 1,\n        limit: pageSize,\n      });\n      setPageCount(notifications.meta.totalPages);\n      // @ts-ignore\n      setData(notifications.data);\n      await appContext.setUser(await api.getUser());\n      setLoading(false);\n    }\n  }, []);\n\n  return (\n    <UserTableContainer>\n      <Styles>\n        <Table\n          columns={columns}\n          data={data}\n          fetchData={fetchData}\n          loading={loading}\n          pageCount={pageCount}\n        />\n      </Styles>\n    </UserTableContainer>\n  );\n}\n\nexport default App;\n","import { useState, useEffect, useContext } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport styled from 'styled-components';\nimport Image from 'react-bootstrap/Image';\nimport PlainTextInput from '../../components/Form/PlainTextInput';\nimport AppContext from '../../UserProvider';\nimport AuthorLink from './MyProfile/AuthorLink';\nimport uuid from 'react-uuid';\nimport SuccessModal from '../../components/SuccessModal';\nimport api from '../../../utils/api/api';\nimport { DefaultContainer } from '../../components/DefaultContainer';\nimport Notifications from '../../components/Notifications';\nimport routes from 'app/routes';\n\ntype MyProps = {};\n\nconst DescriptionHeader = styled.h4``;\n\nconst UserInfoHeader = styled.h6``;\n\nconst AddLinkWrapper = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n  margin-right: 10px;\n  align-items: center;\n`;\n\nconst UserImageWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst NotificationContainer = styled.div`\n  display: flex;\n  background: rgba(0, 0, 0, 0.5);\n  flex-direction: column;\n  min-width: 800px;\n  height: 100%;\n  overflow-y: scroll;\n  padding: 10px;\n`;\n\nconst ProfileContainer = styled.div`\n  display: flex;\n  background: rgba(0, 0, 0, 0.5);\n  flex-direction: column;\n  min-width: 800px;\n  height: 100%;\n  overflow-y: none;\n  padding: 10px;\n`;\n\nexport function MyProfile(props: MyProps) {\n  const appContext = useContext(AppContext);\n  const [blurb, setBlurb] = useState(appContext.user?.author?.blurb);\n  const [links, setLinks] = useState(appContext.user?.author?.links ?? []);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [donateLink, setDonateLink] = useState(\n    appContext.user?.author?.donateLink,\n  );\n\n  const refreshUser = async () => {\n    appContext.setUser(await api.getUser());\n    await appContext.user?.getNotifications();\n  };\n\n  useEffect(() => {\n    refreshUser();\n  }, []);\n\n  if (!appContext.user) {\n    return <Redirect to={routes.PERKS} />;\n  }\n\n  const addLink = () => {\n    setLinks([...links, { label: '', link: '' }]);\n  };\n\n  const authorLinks = links.map((link, index) => {\n    return (\n      <AuthorLink\n        key={uuid()}\n        label={link.label}\n        link={link.link}\n        onChange={(label: string, linkText: string) => {\n          link.label = label;\n          link.link = linkText;\n        }}\n        onRemove={() => {\n          const newLinks = [...links];\n          newLinks.splice(index, 1);\n          setLinks(newLinks);\n        }}\n      ></AuthorLink>\n    );\n  });\n\n  return (\n    <ProfileContainer>\n      <DefaultContainer>\n        <UserImageWrapper>\n          <Image\n            src={appContext.user.steamAvatarUrl}\n            className=\"my-profile-avatar\"\n            roundedCircle\n          />\n        </UserImageWrapper>\n        <UserInfoHeader>\n          <b>Author Name:</b> {appContext.user?.author?.name}\n        </UserInfoHeader>\n        <UserInfoHeader>\n          <b>Role:</b> {appContext.user.role}\n        </UserInfoHeader>\n        <UserInfoHeader>\n          <b>Total pack downloads:</b>{' '}\n          {appContext.user?.author?.totalDownloads ?? 'Unknown'}\n        </UserInfoHeader>\n        <Form\n          onSubmit={async e => {\n            e.preventDefault();\n            await api?.updateAuthorProfile({\n              blurb,\n              donateLink,\n              links,\n            });\n            await appContext.setUser(await api.getUser());\n            setShowSuccess(true);\n          }}\n        >\n          <DescriptionHeader>General</DescriptionHeader>\n          <PlainTextInput\n            label=\"About Me\"\n            value={blurb ?? ''}\n            onChange={e => setBlurb(e.target.value)}\n          />\n          <PlainTextInput\n            label=\"Donation Link\"\n            value={donateLink ?? ''}\n            onChange={e => setDonateLink(e.target.value)}\n          />\n          <DescriptionHeader>\n            Other Links (Discord, Twitter, etc..)\n          </DescriptionHeader>\n          {authorLinks}\n          <AddLinkWrapper>\n            <i\n              onClick={() => {\n                addLink();\n              }}\n              className=\"fas fa-plus-circle fa-2x author-link-add\"\n            ></i>\n          </AddLinkWrapper>\n          <Button variant=\"secondary\" type=\"submit\">\n            Save\n          </Button>\n        </Form>\n      </DefaultContainer>\n      <SuccessModal\n        onHide={() => setShowSuccess(false)}\n        title=\"Success\"\n        text=\"Author profile updated successfully!\"\n        show={showSuccess}\n      ></SuccessModal>\n      <br />\n      <NotificationContainer>\n        <Notifications></Notifications>\n      </NotificationContainer>\n    </ProfileContainer>\n  );\n}\n"],"names":["Badge","styled","InputWrapper","InputValueWrapper","PlainTextInput","props","input","tooltip","undefined","helpTxt","help","placement","delay","show","hide","overlay","id","trigger","className","options","onChange","onInputChange","allowNew","labelKey","value","type","disabled","label","SuccessModal","closeVariant","size","onHide","centered","closeButton","title","text","variant","onClick","LinkWrapper","RemoveLinkWrapper","AuthorLink","useState","setLabel","link","setLink","onRemove","e","target","DefaultContainer","UserTableContainer","UserTableFooter","Styles","IndeterminateCheckbox","React","ref","indeterminate","rest","defaultRef","resolvedRef","current","Table","columns","data","fetchData","loading","controlledPageCount","pageCount","useTable","initialState","pageIndex","manualPagination","usePagination","useRowSelect","hooks","visibleColumns","push","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","selectedFlatRows","page","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","selectedRowIds","appContext","useContext","AppContext","Object","keys","length","Button","deletePromises","map","user","deleteNotification","original","Promise","all","log","markPromises","filter","read","markNotification","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","isSorted","isSortedDesc","i","getRowProps","cells","cell","getCellProps","colSpan","defaultValue","Number","accessor","style","textAlign","moment","Date","now","getTime","humanize","setData","setLoading","setPageCount","fetchIdRef","fetchId","getNotifications","limit","notifications","meta","totalPages","api","setUser","DescriptionHeader","UserInfoHeader","AddLinkWrapper","UserImageWrapper","NotificationContainer","ProfileContainer","MyProfile","author","blurb","setBlurb","links","setLinks","showSuccess","setShowSuccess","donateLink","setDonateLink","refreshUser","useEffect","to","routes","authorLinks","index","linkText","newLinks","splice","uuid","Image","src","steamAvatarUrl","roundedCircle","name","role","totalDownloads","Form","onSubmit","preventDefault","Notifications"],"sourceRoot":""}